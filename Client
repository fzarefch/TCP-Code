#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <pthread.h>
#include <pcap.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ether.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>

#define MAX_BUFFER 256
#define PCAP_FILE "fixed_netzwerkverkehr.pcap"
#define LOG_FILE "/home/kali/Schreibtisch/Projekt/netzwerkverkehr.log"

// Funktion zur Fehlerbehandlung
void fehler(const char *msg) {
    perror(msg);
    exit(1);
}

// Struktur zur Speicherung von pcap-Daten
typedef struct {
    pcap_t *handle;
    pcap_dumper_t *dumper;
    FILE *logfile;
    int isRunning;
} PcapData;

// Handler für empfangene Pakete
void packet_handler(u_char *user_data, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    PcapData *pcapData = (PcapData *)user_data;
    pcap_dump((u_char *)pcapData->dumper, pkthdr, packet);

    struct ether_header *eth_header = (struct ether_header *)packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {
        struct ip *ip_header = (struct ip *)(packet + ETHER_HDR_LEN);
        char source_ip[INET_ADDRSTRLEN];
        char dest_ip[INET_ADDRSTRLEN];
        inet_ntop(AF_INET, &(ip_header->ip_src), source_ip, INET_ADDRSTRLEN);
        inet_ntop(AF_INET, &(ip_header->ip_dst), dest_ip, INET_ADDRSTRLEN);

        if (ip_header->ip_p == IPPROTO_TCP) {
            struct tcphdr *tcp_header = (struct tcphdr *)((char *)ip_header + (ip_header->ip_hl << 2));
            fprintf(pcapData->logfile, "TCP Paket: Quell-IP: %s, Ziel-IP: %s, Quell-Port: %d, Ziel-Port: %d\n",
                    source_ip, dest_ip, ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));
        } else if (ip_header->ip_p == IPPROTO_UDP) {
            struct udphdr *udp_header = (struct udphdr *)((char *)ip_header + (ip_header->ip_hl << 2));
            fprintf(pcapData->logfile, "UDP Paket: Quell-IP: %s, Ziel-IP: %s, Quell-Port: %d, Ziel-Port: %d\n",
                    source_ip, dest_ip, ntohs(udp_header->uh_sport), ntohs(udp_header->uh_dport));
        }
    }
}

// Funktion zur Aufzeichnung des Netzwerkverkehrs
void *netzwerkverkehr_aufzeichnen(void *arg) {
    PcapData *pcapData = (PcapData *)arg;
    pcap_loop(pcapData->handle, 0, packet_handler, (u_char *)pcapData);
    return NULL;
}

// Funktion zur Anzeige des Menüs
void menü_anzeigen() {
    printf("\n\n1. Nachricht senden (TCP)\n");
    printf("2. Nachricht senden (UDP)\n");
    printf("3. Netzwerkverkehr aufzeichnen\n");
    printf("4. Nachrichten lesen\n");
    printf("5. Beenden\n");
    printf("Bitte wählen Sie: ");
}

int main(int argc, char *argv[]) {
    int sockfd, portno, n, auswahl;
    struct sockaddr_in serv_addr;
    struct hostent *server;
    struct servent *service;  
    char buffer[MAX_BUFFER];

     if (argc < 3) {
        fprintf(stderr, "Verwendung: %s hostname port [servicename]\n", argv[0]);
        exit(1);
    }

    server = gethostbyname(argv[1]);
    if (server == NULL) {
        fprintf(stderr, "FEHLER, kein solcher Host\n");
        exit(1);
    }

    if (argc == 4) {
        service = getservbyname(argv[3], "tcp");
        if (service == NULL) {
            fprintf(stderr, "FEHLER, kein solcher Service\n");
            exit(1);
        }
        portno = ntohs(service->s_port);
    } else {
        portno = atoi(argv[2]);
    }

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        fehler("FEHLER beim Öffnen des Sockets");
    }

    bzero((char *)&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
    serv_addr.sin_port = htons(portno);

    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        fehler("FEHLER bei der Verbindung");
    }

    pthread_t pcapThread;
    PcapData pcapData;

    // pcapData-Objekt initialisieren
    pcapData.handle = pcap_open_live("any", 65536, 1, 1000, buffer);
    if (pcapData.handle == NULL) {
        fprintf(stderr, "Konnte den pcap-Handle nicht öffnen: %s\n", buffer);
        exit(1);
    }

    pcapData.dumper = pcap_dump_open(pcapData.handle, PCAP_FILE);
    if (pcapData.dumper == NULL) {
        fprintf(stderr, "Konnte die pcap-Dump-Datei nicht öffnen\n");
        pcap_close(pcapData.handle);
        exit(1);
    }

    pcapData.logfile = fopen(LOG_FILE, "a");
    if (pcapData.logfile == NULL) {
        fprintf(stderr, "Konnte die Log-Datei nicht öffnen\n");
        pcap_close(pcapData.handle);
        pcap_dump_close(pcapData.dumper);
        exit(1);
    }

    pcapData.isRunning = 1;

    while (1) {
        menü_anzeigen();
        scanf("%d", &auswahl);
        getchar();

        switch (auswahl) {
            case 1: {
                printf("Bitte geben Sie die Nachricht ein: ");
                bzero(buffer, MAX_BUFFER);
                fgets(buffer, MAX_BUFFER - 1, stdin);

                n = write(sockfd, buffer, strlen(buffer));
                if (n < 0) {
                    fehler("FEHLER beim Schreiben auf den Socket");
                } else {
                    FILE *log = fopen(LOG_FILE, "a");
                    if (log != NULL) {
                        fputs(buffer, log);
                        fclose(log);
                    } else {
                        perror("Konnte Log-Datei nicht öffnen");
                    }
                }
                break;
            }
            case 2: {
                printf("Bitte geben Sie die Nachricht ein: ");
                bzero(buffer, MAX_BUFFER);
                fgets(buffer, MAX_BUFFER - 1, stdin);

                int udpsockfd;
                struct sockaddr_in udp_serv_addr;

                                udpsockfd = socket(AF_INET, SOCK_DGRAM, 0);
                if (udpsockfd < 0) {
                    fehler("FEHLER beim Öffnen des UDP-Sockets");
                }

                bzero((char *)&udp_serv_addr, sizeof(udp_serv_addr));
                udp_serv_addr.sin_family = AF_INET;
                bcopy((char *)server->h_addr, (char *)&udp_serv_addr.sin_addr.s_addr, server->h_length);
                udp_serv_addr.sin_port = htons(portno);

                n = sendto(udpsockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&udp_serv_addr, sizeof(udp_serv_addr));
                if (n < 0) {
                    fehler("FEHLER beim Senden der UDP-Nachricht");
                } else {
                    FILE *log = fopen(LOG_FILE, "a");
                    if (log != NULL) {
                        fputs(buffer, log);
                        fclose(log);
                    } else {
                        perror("Konnte Log-Datei nicht öffnen");
                    }
                }
                close(udpsockfd);
                break;
            }
            case 3: {
                printf("Starte die Aufzeichnung des Netzwerkverkehrs...\n");
                pthread_create(&pcapThread, NULL, netzwerkverkehr_aufzeichnen, (void *)&pcapData);
                break;
            }
            case 4: {
                FILE *log = fopen(LOG_FILE, "r");
                if (log != NULL) {
                    while (fgets(buffer, MAX_BUFFER, log) != NULL) {
                        printf("%s", buffer);
                    }
                    fclose(log);
                } else {
                    perror("Konnte Log-Datei nicht öffnen");
                }
                break;
            }
            case 5: {
                printf("Beende das Programm...\n");
                pcapData.isRunning = 0;
                pthread_join(pcapThread, NULL);
                fclose(pcapData.logfile);
                pcap_dump_close(pcapData.dumper);
                pcap_close(pcapData.handle);
                close(sockfd);
                exit(0);
            }
            default: {
                printf("Ungültige Auswahl. Bitte versuchen Sie es erneut.\n");
                break;
            }
        }
    }

    return 0;
}

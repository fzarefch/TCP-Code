#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <pthread.h>
#include <pcap.h>
#include <netinet/ip.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ether.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>

#define MAX_BUFFER 256
#define TCP_PORT 1234
#define UDP_PORT 1235
#define LOG_FILE "/home/kali/Schreibtisch/VSProjekte/log.txt"
#define PCAP_FILE "fixed_netzwerkverkehr.pcap"

void fehler(const char *msg) {
    perror(msg);
    exit(1);
}

typedef struct {

    pcap_t *handle;

    pcap_dumper_t *dumper;

    FILE *logfile;

} PcapData;



void packet_handler(u_char *user_data, const struct pcap_pkthdr *pkthdr, const u_char *packet) {

    PcapData *pcapData = (PcapData *)user_data;

    pcap_dump((u_char *)pcapData->dumper, pkthdr, packet);



    struct ether_header *eth_header = (struct ether_header *)packet;

    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {

        struct ip *ip_header = (struct ip *)(packet + ETHER_HDR_LEN);

        char source_ip[INET_ADDRSTRLEN];

        char dest_ip[INET_ADDRSTRLEN];

        inet_ntop(AF_INET, &(ip_header->ip_src), source_ip, INET_ADDRSTRLEN);

        inet_ntop(AF_INET, &(ip_header->ip_dst), dest_ip, INET_ADDRSTRLEN);



        if (ip_header->ip_p == IPPROTO_TCP) {

            struct tcphdr *tcp_header = (struct tcphdr *)((char *)ip_header + (ip_header->ip_hl << 2));

            fprintf(pcapData->logfile, "TCP Packet: Source IP: %s, Destination IP: %s, Source Port: %d, Destination Port: %d, Flags: %d\n",

                    source_ip, dest_ip, ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport), tcp_header->th_flags);

        } else if (ip_header->ip_p == IPPROTO_UDP) {

            struct udphdr *udp_header = (struct udphdr *)((char *)ip_header + (ip_header->ip_hl << 2));

            fprintf(pcapData->logfile, "UDP Packet: Source IP: %s, Destination IP: %s, Source Port: %d, Destination Port: %d\n",

                    source_ip, dest_ip, ntohs(udp_header->uh_sport), ntohs(udp_header->uh_dport));

        }

    }

}



void netzwerkverkehr_aufzeichnen(const char *dateiname) {

    pcap_t *handle;

    char errbuf[PCAP_ERRBUF_SIZE];

    struct pcap_pkthdr header;

    const u_char *packet;



    handle = pcap_open_live("eth0", BUFSIZ, 1, 1000, errbuf);

    if (handle == NULL) {

        fprintf(stderr, "Konnte Gerät nicht öffnen: %s\n", errbuf);

        return;

    }



    pcap_dumper_t *dumper = pcap_dump_open(handle, dateiname);

    if (dumper == NULL) {

fprintf(stderr, "Konnte die pcap-Dump-Datei nicht öffnen\n");

pcap_close(handle);

return;

}

PcapData pcapData;

pcapData.handle = handle;

pcapData.dumper = dumper;

pcapData.logfile = fopen(LOG_FILE, "a");

if (pcapData.logfile == NULL) {

    fprintf(stderr, "Konnte die Log-Datei nicht öffnen\n");

    pcap_dump_close(dumper);

    pcap_close(handle);

    return;

}



pcap_loop(handle, 0, packet_handler, (u_char *)&pcapData);



pcap_dump_close(dumper);

pcap_close(handle);

}



size_t payload_source(void *ptr, size_t size, size_t nmemb, void *userp) {

const char *payload_text = "Dies ist der Inhalt der E-Mail";

size_t payload_size = strlen(payload_text);

size_t buffer_size = size * nmemb;

size_t copy_size = payload_size < buffer_size ? payload_size : buffer_size;



memcpy(ptr, payload_text, copy_size);



return copy_size;

}



int main(int argc, char *argv[]) {
    struct sockaddr_in tcp_serv_addr, udp_serv_addr, cli_addr;
    int tcp_sockfd, udp_sockfd, newsockfd;
    socklen_t clilen;
    char buffer[MAX_BUFFER];
    int n;

 tcp_sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (tcp_sockfd < 0) {
        fehler("FEHLER beim Öffnen des TCP-Sockets");
    }

    udp_sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (udp_sockfd < 0) {
        fehler("FEHLER beim Öffnen des UDP-Sockets");
    }
    
    FILE *logFile = fopen(LOG_FILE, "a");
    if (logFile == NULL) {
        fehler("FEHLER beim Öffnen der Log-Datei");
    }



bzero((char *)&tcp_serv_addr, sizeof(tcp_serv_addr));

bzero((char *)&udp_serv_addr, sizeof(udp_serv_addr));



tcp_serv_addr.sin_family = AF_INET;

tcp_serv_addr.sin_addr.s_addr = INADDR_ANY;

tcp_serv_addr.sin_port = htons(TCP_PORT);



udp_serv_addr.sin_family = AF_INET;

udp_serv_addr.sin_addr.s_addr = INADDR_ANY;

udp_serv_addr.sin_port = htons(UDP_PORT);



if (bind(tcp_sockfd, (struct sockaddr *)&tcp_serv_addr, sizeof(tcp_serv_addr)) < 0) {

    fehler("FEHLER beim Binden des TCP-Sockets");

}



if (bind(udp_sockfd, (struct sockaddr *)&udp_serv_addr, sizeof(udp_serv_addr)) < 0) {

fehler("FEHLER beim Binden des UDP-Sockets");

}

listen(tcp_sockfd, 5);

clilen = sizeof(cli_addr);



// Netzwerkverkehr aufzeichnen

netzwerkverkehr_aufzeichnen(PCAP_FILE);


while (1) {
        fd_set readfds;
        int max_fd;

        FD_ZERO(&readfds);
        FD_SET(tcp_sockfd, &readfds);
        FD_SET(udp_sockfd, &readfds);

        max_fd = (tcp_sockfd > udp_sockfd) ? tcp_sockfd : udp_sockfd;

        select(max_fd + 1, &readfds, NULL, NULL, NULL);

        if (FD_ISSET(tcp_sockfd, &readfds)) {
            newsockfd = accept(tcp_sockfd, (struct sockaddr *)&cli_addr, &clilen);
            if (newsockfd < 0) {
                fehler("FEHLER beim Akzeptieren der TCP-Verbindung");
            }

            bzero(buffer, MAX_BUFFER);
            n = read(newsockfd, buffer, MAX_BUFFER - 1);
            if (n < 0) {
                fehler("FEHLER beim Lesen vom TCP-Socket");
            }

            printf("TCP-Nachricht erhalten: %s\n", buffer);
            fprintf(logFile, "%s\n", buffer);

            n = write(newsockfd, "Nachricht erfolgreich empfangen (TCP)", 36);
            if (n < 0) {
                fehler("FEHLER beim Schreiben auf den TCP-Socket");
            }

            close(newsockfd);
        }



    if (FD_ISSET(udp_sockfd, &readfds)) {

        bzero(buffer, MAX_BUFFER);

        clilen = sizeof(cli_addr);

        n = recvfrom(udp_sockfd, buffer, MAX_BUFFER - 1, 0, (struct sockaddr *)&cli_addr, &clilen);

        if (n < 0) {

            fehler("FEHLER beim Lesen vom UDP-Socket");

        }



        printf("UDP-Nachricht erhalten: %s\n", buffer);

        FILE *logFile = fopen(LOG_FILE, "a");

        if (logFile != NULL) {

            fprintf(logFile, "%s\n", buffer);

            fclose(logFile);

        } else {

            printf("FEHLER beim Öffnen der Log-Datei\n");

        }

    }

}

fclose(logFile);

    close(tcp_sockfd);
    close(udp_sockfd);

    return 0;
}


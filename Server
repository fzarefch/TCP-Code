#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <pcap.h>

#define BUF_SIZE 1024
#define FILE_NAME "server_log.txt"

void error_handling(char *message);
void packet_handler(unsigned char *user_data, const struct pcap_pkthdr *pkthdr, const unsigned char *packet);

int main(int argc, char *argv[]) {
    int serv_sock, clnt_sock;
    char message[BUF_SIZE];
    int str_len;

    struct sockaddr_in serv_adr, clnt_adr;
    socklen_t clnt_adr_sz;

    if (argc != 2) {
        printf("Usage : %s <port>\n", argv[0]);
        exit(1);
    }

    serv_sock = socket(PF_INET, SOCK_STREAM, 0);
    if (serv_sock == -1)
        error_handling("socket() error");

    memset(&serv_adr, 0, sizeof(serv_adr));
    serv_adr.sin_family = AF_INET;
    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
    serv_adr.sin_port = htons(atoi(argv[1]));

    if (bind(serv_sock, (struct sockaddr *)&serv_adr, sizeof(serv_adr)) == -1)
        error_handling("bind() error");

    if (listen(serv_sock, 5) == -1)
        error_handling("listen() error");

    clnt_adr_sz = sizeof(clnt_adr);
    clnt_sock = accept(serv_sock, (struct sockaddr *)&clnt_adr, &clnt_adr_sz);
    if (clnt_sock == -1)
        error_handling("accept() error");

    int log_file = open(FILE_NAME, O_RDWR | O_CREAT | O_APPEND, 0644);
    if (log_file == -1)
        error_handling("File open error");

    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];

    handle = pcap_open_dead(DLT_EN10MB, BUFSIZ);
    if (handle == NULL)
        error_handling("pcap_open_dead() error");

    pcap_dumper_t *dumper = pcap_dump_open(handle, FILE_NAME);
    if (dumper == NULL)
        error_handling("pcap_dump_open() error");

    pcap_loop(handle, -1, packet_handler, (u_char *)dumper);

    pcap_dump_close(dumper);
    pcap_close(handle);
    close(log_file);
    close(clnt_sock);
    close(serv_sock);
    return 0;
}

void error_handling(char *message) {
    fputs(message, stderr);
    fputc('\n', stderr);
    exit(1);
}

void packet_handler(unsigned char *user_data, const struct pcap_pkthdr *pkthdr, const unsigned char *packet) {
    pcap_dumper_t *dumper = (pcap_dumper_t *)user_data;
    pcap_dump((u_char *)dumper, pkthdr, packet);
}

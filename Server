#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <pthread.h>
#include <pcap.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ether.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>
#include <curl/curl.h>

#define MAX_BUFFER 256
#define TCP_PORT 1234
#define UDP_PORT 1235
#define LOG_FILE "log.txt"

void fehler(const char *msg) {
    perror(msg);
    exit(1);
}

void netzwerkverkehr_aufzeichnen(const char *dateiname) {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct pcap_pkthdr header;
    const u_char *packet;

    handle = pcap_open_live("eth0", BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Konnte Gerät nicht öffnen: %s\n", errbuf);
        return;
    }

    pcap_dumper_t *dumper = pcap_dump_open(handle, dateiname);
    if (dumper == NULL) {
        fprintf(stderr, "Konnte die pcap-Dump-Datei nicht öffnen\n");
        pcap_close(handle);
        return;
    }

    while (1) {
        packet = pcap_next(handle, &header);
        pcap_dump((u_char *)dumper, &header, packet);
    }

    pcap_dump_close(dumper);
    pcap_close(handle);
}

size_t payload_source(void *ptr, size_t size, size_t nmemb, void *userp) {
    const char *payload_text = "Dies ist der Inhalt der E-Mail";
    size_t payload_size = strlen(payload_text);

    size_t buffer_size = size * nmemb;
    size_t copy_size = payload_size < buffer_size ? payload_size : buffer_size;

    memcpy(ptr, payload_text, copy_size);

    return copy_size;
}

void send_email() {
    CURL *curl;
    CURLcode res = CURLE_OK;
    struct curl_slist *recipients = NULL;

    curl = curl_easy_init();
    if (curl) {
        curl_easy_setopt(curl, CURLOPT_USERNAME, "Ihr_Benutzername");
        curl_easy_setopt(curl, CURLOPT_PASSWORD, "Ihr_Passwort");
        curl_easy_setopt(curl, CURLOPT_URL, "smtp.example.com:587");
        curl_easy_setopt(curl, CURLOPT_USE_SSL, (long)CURLUSESSL_ALL);
        curl_easy_setopt(curl, CURLOPT_MAIL_FROM, "<absender@example.com>");
        recipients = curl_slist_append(recipients, "<empfaenger@example.com>");
        curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients);
        curl_easy_setopt(curl, CURLOPT_READFUNCTION, payload_source);
        curl_easy_setopt(curl, CURLOPT_READDATA, &upload_ctx);
        curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);
        curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);
        res = curl_easy_perform(curl);
        if (res != CURLE_OK)
            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        curl_slist_free_all(recipients);
        curl_easy_cleanup(curl);
    }
}

int main(int argc, char *argv[]) {
    struct sockaddr_in tcp_serv_addr, udp_serv_addr, cli_addr;
    int tcp_sockfd, udp_sockfd
    tcp_sockfd = socket(AF_INET, SOCK_STREAM, 0);
    udp_sockfd = socket(AF_INET, SOCK_DGRAM, 0);

    if (tcp_sockfd < 0 || udp_sockfd < 0) {
        fehler("FEHLER beim Öffnen des Sockets");
    }

    bzero((char *)&tcp_serv_addr, sizeof(tcp_serv_addr));
    bzero((char *)&udp_serv_addr, sizeof(udp_serv_addr));

    tcp_serv_addr.sin_family = AF_INET;
    tcp_serv_addr.sin_addr.s_addr = INADDR_ANY;
    tcp_serv_addr.sin_port = htons(TCP_PORT);

    udp_serv_addr.sin_family = AF_INET;
    udp_serv_addr.sin_addr.s_addr = INADDR_ANY;
    udp_serv_addr.sin_port = htons(UDP_PORT);

    if (bind(tcp_sockfd, (struct sockaddr *)&tcp_serv_addr, sizeof(tcp_serv_addr)) < 0) {
        fehler("FEHLER beim Binden des TCP-Sockets");
    }

    if (bind(udp_sockfd, (struct sockaddr *)&udp_serv_addr, sizeof(udp_serv_addr)) < 0) {
        fehler("FEHLER beim Binden des UDP-Sockets");
    }

    listen(tcp_sockfd, 5);
    clilen = sizeof(cli_addr);

    // Netzwerkverkehr aufzeichnen
    netzwerkverkehr_aufzeichnen(PCAP_FILE);

    while (1) {
        fd_set readfds;
        int max_fd;

        FD_ZERO(&readfds);
        FD_SET(tcp_sockfd, &readfds);
        FD_SET(udp_sockfd, &readfds);

        max_fd = (tcp_sockfd > udp_sockfd) ? tcp_sockfd : udp_sockfd;

        select(max_fd + 1, &readfds, NULL, NULL, NULL);

        if (FD_ISSET(tcp_sockfd, &readfds)) {
            newsockfd = accept(tcp_sockfd, (struct sockaddr *)&cli_addr, &clilen);
            if (newsockfd < 0) {
                fehler("FEHLER beim Akzeptieren der TCP-Verbindung");
            }

            bzero(buffer, MAX_BUFFER);
            n = read(newsockfd, buffer, MAX_BUFFER - 1);
            if (n < 0) {
                fehler("FEHLER beim Lesen vom TCP-Socket");
            }

            printf("TCP-Nachricht erhalten: %s\n", buffer);
            FILE *logFile = fopen(LOG_FILE, "a");
            if (logFile != NULL) {
                fprintf(logFile, "%s\n", buffer);
                fclose(logFile);
            } else {
                printf("FEHLER beim Öffnen der Log-Datei\n");
            }

            n = write(newsockfd, "Nachricht erfolgreich empfangen (TCP)", 36);
            if (n < 0) {
                fehler("FEHLER beim Schreiben auf den TCP-Socket");
            }

            close(newsockfd);
        }

        if (FD_ISSET(udp_sockfd, &readfds)) {
            bzero(buffer, MAX_BUFFER);
            clilen = sizeof(cli_addr);
            n = recvfrom(udp_sockfd, buffer, MAX_BUFFER - 1, 0, (struct sockaddr *)&cli_addr, &clilen);
            if (n < 0) {
                fehler("FEHLER beim Lesen vom UDP-Socket");
            }

            printf("UDP-Nachricht erhalten: %s\n", buffer);
            FILE *logFile = fopen(LOG_FILE, "a");
            if (logFile != NULL) {
                fprintf(logFile, "%s\n", buffer);
                fclose(logFile);
            } else {
                printf("FEHLER beim Öffnen der Log-Datei\n");
            }
        }
    }

    close(tcp_sockfd);
    close(udp_sockfd);
    return 0;
}
